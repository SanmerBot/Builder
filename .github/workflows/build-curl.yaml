name: Build cURL

on:
  pull_request:
    paths:
      - ".github/workflows/build-curl.yaml"

  workflow_dispatch:
    inputs:
      android_ndk_version:
        description: "Android NDK Version"
        required: true
        default: "28.2.13676358"
      android_sdk_version:
        description: "Android SDK Version"
        required: true
        default: "30"

env:
  LIBUNISTRING_VERSION: "1.3"
  LIBIDN2_VERSION: "2.3.8"
  LIBPSL_VERSION: "0.21.5"
  OPENSSL_VERSION: "3.5.3"
  BROTLI_VERSION: "1.1.0"
  ZSTD_VERSION: "1.5.7"
  LIBSSH2_VERSION: "1.11.1"
  NGHTTP2_VERSION: "1.67.1"
  NGHTTP3_VERSION: "1.11.0"
  NGTCP2_VERSION: "1.15.1"
  CURL_VERSION: "8.16.0"

jobs:
  build:
    name: Build cURL for ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [arm64-v8a, x86_64]
        include:
          - target: arm64-v8a
            platform: android-arm64
            host: aarch64-linux-android
          - target: x86_64
            platform: android-x86_64
            host: x86_64-linux-android
    steps:
      - name: Checkout Libunistring - ${{ env.LIBUNISTRING_VERSION }}
        run: |
          curl -L -o libunistring.tar.gz https://mirrors.edge.kernel.org/gnu/libunistring/libunistring-${{ env.LIBUNISTRING_VERSION }}.tar.gz
          tar -xzvf libunistring.tar.gz
          mv libunistring-${{ env.LIBUNISTRING_VERSION }} libunistring
          rm libunistring.tar.gz

      - name: Checkout Libidn2 - ${{ env.LIBIDN2_VERSION }}
        run: |
          curl -L -o libidn2.tar.gz https://mirrors.edge.kernel.org/gnu/libidn/libidn2-${{ env.LIBUNISTRING_VERSION }}.tar.gz
          tar -xzvf libidn2.tar.gz
          mv libidn2-${{ env.LIBIDN2_VERSION }} libidn2
          rm libidn2.tar.gz

      - name: Checkout Libpsl - ${{ env.LIBPSL_VERSION }}
        run: |
          curl -L -o libpsl.tar.gz https://github.com/rockdaboot/libpsl/releases/latest/download/libpsl-${{ env.LIBPSL_VERSION }}.tar.gz
          tar -xzvf libpsl.tar.gz
          mv libpsl-${{ env.LIBPSL_VERSION }} libpsl
          rm libpsl.tar.gz

      - name: Checkout OpenSSL - ${{ env.OPENSSL_VERSION }}
        uses: actions/checkout@v5
        with:
          repository: openssl/openssl
          ref: openssl-${{ env.OPENSSL_VERSION }}
          path: openssl
          submodules: true

      - name: Checkout Brotli - ${{ env.BROTLI_VERSION }}
        uses: actions/checkout@v5
        with:
          repository: google/brotli
          ref: v${{ env.BROTLI_VERSION }}
          path: brotli
          submodules: true

      - name: Checkout Zstd - ${{ env.ZSTD_VERSION }}
        uses: actions/checkout@v5
        with:
          repository: facebook/zstd
          ref: v${{ env.ZSTD_VERSION }}
          path: zstd
          submodules: true

      - name: Checkout LibSSH2 - ${{ env.LIBSSH2_VERSION }}
        run: |
          curl -L -o libssh2.tar.gz https://github.com/libssh2/libssh2/releases/latest/download/libssh2-${{ env.LIBSSH2_VERSION }}.tar.gz
          tar -xzvf libssh2.tar.gz
          mv libssh2-${{ env.LIBSSH2_VERSION }} libssh2
          rm libssh2.tar.gz

      - name: Checkout NgHTTP2 - ${{ env.NGHTTP2_VERSION }}
        uses: actions/checkout@v5
        with:
          repository: nghttp2/nghttp2
          ref: v${{ env.NGHTTP2_VERSION }}
          path: nghttp2
          submodules: true

      - name: Checkout NgHTTP3 - ${{ env.NGHTTP3_VERSION }}
        uses: actions/checkout@v5
        with:
          repository: ngtcp2/nghttp3
          ref: v${{ env.NGHTTP3_VERSION }}
          path: nghttp3
          submodules: true

      - name: Checkout NgTCP2 - ${{ env.NGTCP2_VERSION }}
        uses: actions/checkout@v5
        with:
          repository: ngtcp2/ngtcp2
          ref: v${{ env.NGTCP2_VERSION }}
          path: ngtcp2
          submodules: true

      - name: Checkout cURL - ${{ env.CURL_VERSION }}
        run: |
          curl -L -o curl.tar.gz https://github.com/curl/curl/releases/latest/download/curl-${{ env.CURL_VERSION }}.tar.gz
          tar -xzvf curl.tar.gz
          mv curl-${{ env.CURL_VERSION }} curl
          rm curl.tar.gz

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: ""

      - name: Set up Android NDK
        run: |
          sdkmanager --install "ndk;${{ inputs.android_ndk_version }}"
          ANDROID_NDK_ROOT="${ANDROID_SDK_ROOT}/ndk/${{ inputs.android_ndk_version }}"
          ANDROID_NDK_BUILD=`ls ${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/`
          ANDROID_NDK_PATH="${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/${ANDROID_NDK_BUILD}/bin"
          echo "ANDROID_NDK_ROOT=${ANDROID_NDK_ROOT}" >> $GITHUB_ENV
          echo "ANDROID_NDK_PATH=${ANDROID_NDK_PATH}" >> $GITHUB_ENV
          $ANDROID_NDK_PATH/${{ matrix.host }}${{ inputs.android_sdk_version }}-clang --version

      - name: Set up Runtime Prefix
        run: |
          echo "RUNTIME_PREFIX=/data/data/dev.sanmer.shell" >> $GITHUB_ENV

      - name: Build Libunistring
        working-directory: libunistring
        run: |
          export PATH=${ANDROID_NDK_PATH}:${PATH}
          export CC=${{ matrix.host }}${{ inputs.android_sdk_version }}-clang
          export CXX=${{ matrix.host }}${{ inputs.android_sdk_version }}-clang++
          export AR=llvm-ar
          export RANLIB=llvm-ranlib
          export STRIP=llvm-strip

          ./configure --prefix=${GITHUB_WORKSPACE}/local \
                      --host=${{ matrix.host }} \
                      --enable-shared=yes \
                      --enable-static=no

          make -j$(nproc)
          make install

      - name: Build Libidn2
        working-directory: libidn2
        run: |
          export PATH=${ANDROID_NDK_PATH}:${PATH}
          export CC=${{ matrix.host }}${{ inputs.android_sdk_version }}-clang
          export CXX=${{ matrix.host }}${{ inputs.android_sdk_version }}-clang++
          export AR=llvm-ar
          export RANLIB=llvm-ranlib
          export STRIP=llvm-strip

          ./configure --prefix=${GITHUB_WORKSPACE}/local \
                      --host=${{ matrix.host }} \
                      --enable-shared=yes \
                      --enable-static=no \
                      --with-libunistring-prefix=${GITHUB_WORKSPACE}/local \
                      --disable-rpath \
                      --disable-doc

          make -j$(nproc)
          make install

      - name: Build Libpsl
        working-directory: libpsl
        run: |
          export PATH=${ANDROID_NDK_PATH}:${PATH}
          export CC=${{ matrix.host }}${{ inputs.android_sdk_version }}-clang
          export CXX=${{ matrix.host }}${{ inputs.android_sdk_version }}-clang++
          export AR=llvm-ar
          export RANLIB=llvm-ranlib
          export STRIP=llvm-strip

          CFLAGS="-I${GITHUB_WORKSPACE}/local/include" \
          LIBS="-L${GITHUB_WORKSPACE}/local/lib" \
          ./configure --prefix=${GITHUB_WORKSPACE}/local \
                      --host=${{ matrix.host }} \
                      --enable-shared=yes \
                      --enable-static=no \
                      --enable-runtime=libidn2

          make -j$(nproc)
          make install

      - name: Build OpenSSL
        working-directory: openssl
        run: |
          export PATH=${ANDROID_NDK_PATH}:${PATH}

          ./Configure ${{ matrix.platform }} -D__ANDROID_API__=${{ inputs.android_sdk_version }} \
                      --release \
                      --prefix=${GITHUB_WORKSPACE}/local \
                      --openssldir=${RUNTIME_PREFIX}/etc/ssl \
                      -DMODULESDIR=\\\"${RUNTIME_PREFIX}/usr/lib/modules\\\" \
                      -DENGINESDIR=\\\"${RUNTIME_PREFIX}/usr/lib/engines\\\" \
                      no-docs no-tests \
                      no-engine no-legacy

          make -j$(nproc)
          make install_sw

      - name: Build Brotli
        working-directory: brotli
        run: |
          cmake -S . -B build \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/local \
                -DANDROID_PLATFORM=android-${{ inputs.android_sdk_version }} \
                -DANDROID_ABI=${{ matrix.target }} \
                -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_ROOT}/build/cmake/android.toolchain.cmake \
                -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
                -DBUILD_SHARED_LIBS=ON

          cmake --build build --target install

      - name: Build Zstd
        working-directory: zstd/build/cmake
        run: |
          cmake -S . -B build \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/local \
                -DANDROID_PLATFORM=android-${{ inputs.android_sdk_version }} \
                -DANDROID_ABI=${{ matrix.target }} \
                -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_ROOT}/build/cmake/android.toolchain.cmake \
                -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
                -DBUILD_SHARED_LIBS=ON \
                -DZSTD_BUILD_STATIC=OFF \
                -DZSTD_PROGRAMS_LINK_SHARED=ON

          cmake --build build --target install

      - name: Build LibSSH2
        working-directory: libssh2
        run: |
          cmake -S . -B build \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/local \
                -DANDROID_PLATFORM=android-${{ inputs.android_sdk_version }} \
                -DANDROID_ABI=${{ matrix.target }} \
                -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_ROOT}/build/cmake/android.toolchain.cmake \
                -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
                -DBUILD_SHARED_LIBS=ON \
                -DBUILD_STATIC_LIBS=OFF \
                -DCRYPTO_BACKEND=OpenSSL \
                -DCMAKE_FIND_ROOT_PATH=${GITHUB_WORKSPACE}/local \
                -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
                -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY

          cmake --build build --target install

      - name: Build NgHTTP2
        working-directory: nghttp2
        run: |
          cmake -S . -B build \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/local \
                -DANDROID_PLATFORM=android-${{ inputs.android_sdk_version }} \
                -DANDROID_ABI=${{ matrix.target }} \
                -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_ROOT}/build/cmake/android.toolchain.cmake \
                -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
                -DENABLE_LIB_ONLY=ON \
                -DBUILD_SHARED_LIBS=ON \
                -DBUILD_STATIC_LIBS=OFF

          cmake --build build --target install

      - name: Build NgHTTP3
        working-directory: nghttp3
        run: |
          cmake -S . -B build \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/local \
                -DANDROID_PLATFORM=android-${{ inputs.android_sdk_version }} \
                -DANDROID_ABI=${{ matrix.target }} \
                -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_ROOT}/build/cmake/android.toolchain.cmake \
                -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
                -DENABLE_LIB_ONLY=ON \
                -DENABLE_SHARED_LIB=ON \
                -DENABLE_STATIC_LIB=OFF

          cmake --build build --target install

      - name: Build NgTCP2
        working-directory: ngtcp2
        run: |
          cmake -S . -B build \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/local \
                -DANDROID_PLATFORM=android-${{ inputs.android_sdk_version }} \
                -DANDROID_ABI=${{ matrix.target }} \
                -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_ROOT}/build/cmake/android.toolchain.cmake \
                -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
                -DENABLE_LIB_ONLY=ON \
                -DENABLE_SHARED_LIB=ON \
                -DENABLE_STATIC_LIB=OFF \
                -DENABLE_OPENSSL=ON \
                -DCMAKE_FIND_ROOT_PATH=${GITHUB_WORKSPACE}/local \
                -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
                -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY

          cmake --build build --target install

      - name: Build cURL
        working-directory: curl
        run: |
          cmake -S . -B build \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/local \
                -DANDROID_PLATFORM=android-${{ inputs.android_sdk_version }} \
                -DANDROID_ABI=${{ matrix.target }} \
                -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_ROOT}/build/cmake/android.toolchain.cmake \
                -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
                -DBUILD_EXAMPLES=OFF \
                -DBUILD_LIBCURL_DOCS=OFF \
                -DBUILD_MISC_DOCS=OFF \
                -DBUILD_SHARED_LIBS=ON \
                -DBUILD_STATIC_CURL=OFF \
                -DBUILD_STATIC_LIBS=OFF \
                -DBUILD_TESTING=OFF \
                -DCURL_LTO=ON \
                -DENABLE_CURL_MANUAL=OFF \
                -DCURL_CA_BUNDLE=${RUNTIME_PREFIX}/etc/ssl/cert.pem \
                -DCURL_CA_PATH=${RUNTIME_PREFIX}/etc/ssl/certs \
                -DCURL_ENABLE_SSL=ON \
                -DCURL_DISABLE_LDAP=ON \
                -DCURL_DISABLE_NTLM=ON \
                -DCURL_BROTLI=ON \
                -DCURL_USE_LIBPSL=ON \
                -DCURL_USE_LIBSSH2=ON \
                -DCURL_USE_OPENSSL=ON \
                -DCURL_ZSTD=ON \
                -DUSE_LIBIDN2=ON \
                -DUSE_NGHTTP2=ON \
                -DUSE_NGTCP2=ON \
                -DCMAKE_FIND_ROOT_PATH=${GITHUB_WORKSPACE}/local \
                -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
                -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY

          cmake --build build --target install

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: local
